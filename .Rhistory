## Load data
require(DMwR)
data(sales)
head(sales)
summary(sales)
nlevels(sales$ID)
nlevels(sales$Prod)
sum(is.na(sales$Quant)& is.na(sales$Val))
table(sales$Insp)/nrow(sales)*100
totS <- table(sales$ID)
totP <- table(sales$Prod)
par(mfcol = c(1,2))
barplot(totS, main="Transactions per salespeople", name.arg='',
xlab='Salespeople',ylab='Amount')
barplot(totP, main='Transactions per product', names.arg='',
xlab='Products',ylab='Amount')
sales$Uprice <- sales$Val/sales$Quant
summary(sales$Uprice)
attach(sales)
upp <- aggregate(Uprice,list(Prod),median,na.rm=T)
topP <- sapply(c(T,F),function(o)
upp[order(upp[,2],decreasing=o)[1:5],1])
colnames(topP)<-c('Expensive','Cheap')
topP
tops <- sales[Prod %in% topP[1,],c('Prod','Uprice')]
tops$Prod <- factor(tops$Prod)
par(mfcol = c(1,2))
boxplot(Uprice~Prod, data=tops,ylab='Uprice',log='y')
vs <- aggregate(Val,list(ID),sum,na.rm=T)
scoresSs <- sapply(c(T,F),function(o)
vs[order(vs$x,decreasing=o)[1:5],1])
colnames(scoresSs)<-c('Most','Least')
scoresSs
scores <- sales[ID %in% scoresSs[1,],c('ID','Val')]
scores$ID <- factor(scores$ID)
boxplot(Val~ID,data=scores,ylab='Val',log='y')
sum(vs[order(vs$x,decreasing=T)[1:100],2])/sum(Val,na.rm=T)*100
sum(vs[order(vs$x,decreasing=F)[1:2000],2])/sum(Val,na.rm=T)*100
qs <- aggregate(Quant,list(Prod),sum,na.rm=T)
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5],1])
colnames(scoresPs) <- c('Most','Least')
scoresPs
sum(as.double(qs[order(qs$x,decreasing=T)[1:100],2]))/sum(as.double(Quant),na.rm=T)*100
sum(as.double(qs[order(qs$x,decreasing=F)[1:4000],2]))/sum(as.double(Quant),na.rm=T)*100
out <- tapply(Uprice,list(Prod=Prod),function(x)length(boxplot.stats(x)$out))
out[order(out,decreasing = T)[1:10]]
sum(out)
sum(out)/nrow(sales)*100
totS <- table(ID)
totP <- table(Prod)
nas <- sales[which(is.na(Quant)&is.na(Val)),c('ID','Prod')]
propS <- 100*table(nas$ID)/totS
propS[order(propS,decreasing=T)[1:10]]
propP <- 100*table(nas$Prod)/totP
propP[order(propP,decreasing=T)[1:10]]
## join small groups together
detach(sales)
sales <- sales[-which(is.na(sales$Quant)&is.na(sales$Val)),]
## Percent of NA in VAL / QUANT by ID and PROD
nnasQp <- tapply(sales$Quant,list(sales$Prod),function(x)sum(is.na(x)))
propNAsQp <- nnasQp/table(sales$Prod)
propNAsQp[order(propNAsQp,decreasing=T)[1:10]]
sales <- sales[!sales$Prod %in% c('p2442','p2443'),]
nlevels(sales$Prod)
sales$Prod <- factor(sales$Prod)
nlevels(sales$Prod)
nnasQs <- tapply(sales$Quant,list(sales$ID),function(x)sum(is.na(x)))
propNAsQs <- nnasQs/table(sales$ID)
propNAsQs[order(propNAsQs,decreasing = T)[1:10]]
nnasVp <- tapply(sales$Val,list(sales$Prod),function(x)sum(is.na(x)))
propNAsVp<-nnasVp/table(sales$Prod)
propNAsVp[order(propNAsVp,decreasing = T)[1:10]]
nnasVs <- tapply(sales$Val,list(sales$ID),function(x)sum(is.na(x)))
propNAsVs<-nnasVs/table(sales$ID)
propNAsVs[order(propNAsVs,decreasing = T)[1:10]]
##178
## Load data
require(DMwR)
data(sales)
head(sales)
summary(sales)
nlevels(sales$ID)
nlevels(sales$Prod)
sum(is.na(sales$Quant)& is.na(sales$Val))
table(sales$Insp)/nrow(sales)*100
totS <- table(sales$ID)
totP <- table(sales$Prod)
par(mfcol = c(1,2))
barplot(totS, main="Transactions per salespeople", name.arg='',
xlab='Salespeople',ylab='Amount')
barplot(totP, main='Transactions per product', names.arg='',
xlab='Products',ylab='Amount')
sales$Uprice <- sales$Val/sales$Quant
summary(sales$Uprice)
attach(sales)
upp <- aggregate(Uprice,list(Prod),median,na.rm=T)
topP <- sapply(c(T,F),function(o)
upp[order(upp[,2],decreasing=o)[1:5],1])
colnames(topP)<-c('Expensive','Cheap')
topP
tops <- sales[Prod %in% topP[1,],c('Prod','Uprice')]
tops$Prod <- factor(tops$Prod)
par(mfcol = c(1,2))
boxplot(Uprice~Prod, data=tops,ylab='Uprice',log='y')
vs <- aggregate(Val,list(ID),sum,na.rm=T)
scoresSs <- sapply(c(T,F),function(o)
vs[order(vs$x,decreasing=o)[1:5],1])
colnames(scoresSs)<-c('Most','Least')
scoresSs
scores <- sales[ID %in% scoresSs[1,],c('ID','Val')]
scores$ID <- factor(scores$ID)
boxplot(Val~ID,data=scores,ylab='Val',log='y')
sum(vs[order(vs$x,decreasing=T)[1:100],2])/sum(Val,na.rm=T)*100
sum(vs[order(vs$x,decreasing=F)[1:2000],2])/sum(Val,na.rm=T)*100
qs <- aggregate(Quant,list(Prod),sum,na.rm=T)
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5],1])
colnames(scoresPs) <- c('Most','Least')
scoresPs
sum(as.double(qs[order(qs$x,decreasing=T)[1:100],2]))/sum(as.double(Quant),na.rm=T)*100
sum(as.double(qs[order(qs$x,decreasing=F)[1:4000],2]))/sum(as.double(Quant),na.rm=T)*100
out <- tapply(Uprice,list(Prod=Prod),function(x)length(boxplot.stats(x)$out))
out[order(out,decreasing = T)[1:10]]
sum(out)
sum(out)/nrow(sales)*100
totS <- table(ID)
totP <- table(Prod)
nas <- sales[which(is.na(Quant)&is.na(Val)),c('ID','Prod')]
propS <- 100*table(nas$ID)/totS
propS[order(propS,decreasing=T)[1:10]]
propP <- 100*table(nas$Prod)/totP
propP[order(propP,decreasing=T)[1:10]]
## join small groups together
detach(sales)
sales <- sales[-which(is.na(sales$Quant)&is.na(sales$Val)),]
## Percent of NA in VAL / QUANT by ID and PROD
nnasQp <- tapply(sales$Quant,list(sales$Prod),function(x)sum(is.na(x)))
propNAsQp <- nnasQp/table(sales$Prod)
propNAsQp[order(propNAsQp,decreasing=T)[1:10]]
sales <- sales[!sales$Prod %in% c('p2442','p2443'),]
nlevels(sales$Prod)
sales$Prod <- factor(sales$Prod)
nlevels(sales$Prod)
nnasQs <- tapply(sales$Quant,list(sales$ID),function(x)sum(is.na(x)))
propNAsQs <- nnasQs/table(sales$ID)
propNAsQs[order(propNAsQs,decreasing = T)[1:10]]
nnasVp <- tapply(sales$Val,list(sales$Prod),function(x)sum(is.na(x)))
propNAsVp<-nnasVp/table(sales$Prod)
propNAsVp[order(propNAsVp,decreasing = T)[1:10]]
nnasVs <- tapply(sales$Val,list(sales$ID),function(x)sum(is.na(x)))
propNAsVs<-nnasVs/table(sales$ID)
propNAsVs[order(propNAsVs,decreasing = T)[1:10]]
##178
tPrice <- tapply(sales[sales$Insp ! ='fraud','Uprice']),list(sales[sales[sales$Insp != 'fraud','Prod']),median,na.rm=T)
tPrice <- tapply(sales[sales$Insp ! ='fraud','Uprice'],list(sales[sales[sales$Insp != 'fraud','Prod']),median,na.rm=T)
sales$Insp
sales[sales[sales$Insp != 'fraud','Prod']]
sales[sales$Insp != 'fraud','Prod']
tPrice <- tapply(sales[sales$Insp ! ='fraud','Uprice'],list(sales[sales$Insp != 'fraud','Prod']),median,na.rm=T)
sales[sales$Insp != 'fraud','Prod']
list(sales[sales$Insp != 'fraud','Prod'])
sales[sales$Insp ! ='fraud','Uprice']
tPrice <- tapply(sales[sales$Insp !='fraud','Uprice'],list(sales[sales$Insp != 'fraud','Prod']),median,na.rm=T)
tPrice
head(tPrice)
noQuant <- which(is.na(sales$Quant))
noQuant
sales[noQuant,'Quant']
sales[noQuant,'Quant'] <- ceiling(sales[noQuant,'Val']/tPrice[sales[noQuant,'Prod']])
sales[noQuant,'Quant']
noVal <- which(is.na(sales$Val))
sales[noVal,'Val']<-sales[noVal,'Quant']*tPrice[sales[noVal,'Prod']]
sales$Uprice <- sales$Val/sales$Quant
save(sales,file='salesClean.Rdata')
attach(sales)
notF <- which(Insp != 'fraud')
notF
notF <- which(Insp != 'fraud')
ms <- tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){
bp <- boxplot.stats(x)$stats
c(median=bp[3],iqr=bp[4]-bp[2])
})
ms
bp
ms <- matrix(unlist(ms),length(ms),2)
ms
head(ms)
ms <- matrix(unlist(ms),length(ms),2, byrow=T, dimnames=list(names(ms),c('median','iqr')))
head(ms)
list(names(ms),c('median','iqr'))
ms <- matrix(unlist(ms),length(ms),2, byrow=T, dimnames=list(c('median','iqr')))
par(mfrow=c(1,2))
plot(ms[,1],ms[,2],xlab='Median',ylab='IQR',main='')
plot(ms[,1],ms[,2],xlab='Median',ylab='IQR',main='',col='grey',log=xy)
plot(ms[,1],ms[,2],xlab='Median',ylab='IQR',main='',col='grey',log='xy')
smalls <- which(table(Prod)<20)
points(log(ms[smalls,1]),log(ms[smalls,2]),pch='+')
dms <- scale(ms)
dms
ms
smalls <- which(table(Prod)<20)
prods <- tapply(sales$Uprice,sales$Prod,list)
head(prods)
similar <- matrix(NA,length(smalls),7,dimnames=list(names(smalls),c('Simil','ks.stat','ks.p','iqrP','medS','iqrS')))
similar <- matrix(NA,length(smalls),7,dimnames=list(names(smalls),c('Simil','ks.stat','ks.p','medP',iqrP','medS','iqrS')))
similar <- matrix(NA,length(smalls),7,dimnames=list(names(smalls),c('Simil','ks.stat','ks.p','medP','iqrP','medS','iqrS')))
similar
seq(along=smalls)
smalls
for (i in seq(along=smalls)){
d<-scale(dms,dms[smalls[i],],FALSE)
d<-sqrt(drop(d^2 %*% rep(1,ncol(d))))
stat<-ks.test(prods[[smalls[i]]],prods[[order(d)[2]]])
similar[i,]<-c(order(d)[2],stat$statistic,stat$p.value,ms[smalls[i],],ms[order(d)[2],])
}
dms <- scale(ms)
smalls <- which(table(Prod)<20)
prods <- tapply(sales$Uprice,sales$Prod,list)
similar <- matrix(NA,length(smalls),7,dimnames=list(names(smalls),c('Simil','ks.stat','ks.p','medP','iqrP','medS','iqrS')))
for (i in seq(along=smalls)){
d<-scale(dms,dms[smalls[i],],FALSE)
d<-sqrt(drop(d^2 %*% rep(1,ncol(d))))
stat<-ks.test(prods[[smalls[i]]],prods[[order(d)[2]]])
similar[i,]<-c(order(d)[2],stat$statistic,stat$p.value,ms[smalls[i],],ms[order(d)[2],])
}
d<-scale(dms,dms[smalls[1],],FALSE)
d
dms[smalls[1],]
?scale
d<-scale(dms,dms[smalls[1],],FALSE)
d<-sqrt(drop(d^2 %*% rep(1,ncol(d))))
d
drop(d^2 %*% rep(1,ncol(d)))
stat<-ks.test(prods[[smalls[1]]],prods[[order(d)[2]]])
prods[[order(d)[2]]]
stat<-ks.test(prods[[smalls[1]]],prods[[order(d)[2]]])
prods[[order(d)[2]]]
prods[[order(d)[2],]]
prods[[order(d)[2]],]
prods
prods[[1]]
order(d)[2]
prods[[order(d)[2]]]
prods[[4554]]
order(d)[1]
order(d)[3]
head(order(d))
order(d)[1]
order(d)
head(order(d))
head(d)
class(d)
head(order(d,decreasing = T))
head(order(d,decreasing = F))
prods[[order(d)[2]]]
order(d)[2]
order(d)
prods[[order(d)==2]]
order(d)==2
prods[[which(order(d)==2)]]
which(order(d)==2)
order(d)[2]
stat<-ks.test(prods[[smalls[1]]],prods[[4315]])
prods[[order(d)[2]]]
order(d)[2]
sort(d)[2]
dms <- scale(ms)
smalls <- which(table(Prod)<20)
prods <- tapply(sales$Uprice,sales$Prod,list)
similar <- matrix(NA,length(smalls),7,dimnames=list(names(smalls),c('Simil','ks.stat','ks.p','medP','iqrP','medS','iqrS')))
for (i in seq(along=smalls)){
d<-scale(dms,dms[smalls[i],],FALSE)
d<-sqrt(drop(d^2 %*% rep(1,ncol(d))))
stat<-ks.test(prods[[smalls[i]]],prods[[sort(d)[2]]])
similar[i,]<-c(order(d)[2],stat$statistic,stat$p.value,ms[smalls[i],],ms[order(d)[2],])
}
stat<-ks.test(prods[[smalls[i]]],prods[[sort(d)[2]]])
sort(d[2])
sort(d)[2]
head(sort(d))
nrow(prods)
head(prods)
## Load data
require(DMwR)
data(sales)
head(sales)
summary(sales)
nlevels(sales$ID)
nlevels(sales$Prod)
sum(is.na(sales$Quant)& is.na(sales$Val))
table(sales$Insp)/nrow(sales)*100
totS <- table(sales$ID)
totP <- table(sales$Prod)
par(mfcol = c(1,2))
barplot(totS, main="Transactions per salespeople", name.arg='',
xlab='Salespeople',ylab='Amount')
barplot(totP, main='Transactions per product', names.arg='',
xlab='Products',ylab='Amount')
sales$Uprice <- sales$Val/sales$Quant
summary(sales$Uprice)
attach(sales)
upp <- aggregate(Uprice,list(Prod),median,na.rm=T)
topP <- sapply(c(T,F),function(o)
upp[order(upp[,2],decreasing=o)[1:5],1])
colnames(topP)<-c('Expensive','Cheap')
topP
tops <- sales[Prod %in% topP[1,],c('Prod','Uprice')]
tops$Prod <- factor(tops$Prod)
par(mfcol = c(1,2))
boxplot(Uprice~Prod, data=tops,ylab='Uprice',log='y')
vs <- aggregate(Val,list(ID),sum,na.rm=T)
scoresSs <- sapply(c(T,F),function(o)
vs[order(vs$x,decreasing=o)[1:5],1])
colnames(scoresSs)<-c('Most','Least')
scoresSs
scores <- sales[ID %in% scoresSs[1,],c('ID','Val')]
scores$ID <- factor(scores$ID)
boxplot(Val~ID,data=scores,ylab='Val',log='y')
sum(vs[order(vs$x,decreasing=T)[1:100],2])/sum(Val,na.rm=T)*100
sum(vs[order(vs$x,decreasing=F)[1:2000],2])/sum(Val,na.rm=T)*100
qs <- aggregate(Quant,list(Prod),sum,na.rm=T)
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5],1])
colnames(scoresPs) <- c('Most','Least')
scoresPs
sum(as.double(qs[order(qs$x,decreasing=T)[1:100],2]))/sum(as.double(Quant),na.rm=T)*100
sum(as.double(qs[order(qs$x,decreasing=F)[1:4000],2]))/sum(as.double(Quant),na.rm=T)*100
out <- tapply(Uprice,list(Prod=Prod),function(x)length(boxplot.stats(x)$out))
out[order(out,decreasing = T)[1:10]]
sum(out)
sum(out)/nrow(sales)*100
totS <- table(ID)
totP <- table(Prod)
nas <- sales[which(is.na(Quant)&is.na(Val)),c('ID','Prod')]
propS <- 100*table(nas$ID)/totS
propS[order(propS,decreasing=T)[1:10]]
propP <- 100*table(nas$Prod)/totP
propP[order(propP,decreasing=T)[1:10]]
## join small groups together
detach(sales)
sales <- sales[-which(is.na(sales$Quant)&is.na(sales$Val)),]
## Percent of NA in VAL / QUANT by ID and PROD
nnasQp <- tapply(sales$Quant,list(sales$Prod),function(x)sum(is.na(x)))
propNAsQp <- nnasQp/table(sales$Prod)
propNAsQp[order(propNAsQp,decreasing=T)[1:10]]
sales <- sales[!sales$Prod %in% c('p2442','p2443'),]
nlevels(sales$Prod)
sales$Prod <- factor(sales$Prod)
nlevels(sales$Prod)
nnasQs <- tapply(sales$Quant,list(sales$ID),function(x)sum(is.na(x)))
propNAsQs <- nnasQs/table(sales$ID)
propNAsQs[order(propNAsQs,decreasing = T)[1:10]]
nnasVp <- tapply(sales$Val,list(sales$Prod),function(x)sum(is.na(x)))
propNAsVp<-nnasVp/table(sales$Prod)
propNAsVp[order(propNAsVp,decreasing = T)[1:10]]
nnasVs <- tapply(sales$Val,list(sales$ID),function(x)sum(is.na(x)))
propNAsVs<-nnasVs/table(sales$ID)
propNAsVs[order(propNAsVs,decreasing = T)[1:10]]
## Data imputation
tPrice <- tapply(sales[sales$Insp !='fraud','Uprice'],list(sales[sales$Insp != 'fraud','Prod']),median,na.rm=T)
noQuant <- which(is.na(sales$Quant))
sales[noQuant,'Quant'] <- ceiling(sales[noQuant,'Val']/tPrice[sales[noQuant,'Prod']])
noVal <- which(is.na(sales$Val))
sales[noVal,'Val']<-sales[noVal,'Quant']*tPrice[sales[noVal,'Prod']]
sales$Uprice <- sales$Val/sales$Quant
save(sales,file='salesClean.Rdata')
## Few transactions of some products
attach(sales)
notF <- which(Insp != 'fraud')
ms <- tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){
bp <- boxplot.stats(x)$stats
c(median=bp[3],iqr=bp[4]-bp[2]) #boxplot.stats() to obtain median, first and third quartiles
})
ms <- matrix(unlist(ms),length(ms),2, byrow=T, dimnames=list(names(ms),c('median','iqr')))
# iqr - inter-quartile range
head(ms)
par(mfrow=c(1,2))
plot(ms[,1],ms[,2],xlab='Median',ylab='IQR',main='')
plot(ms[,1],ms[,2],xlab='Median',ylab='IQR',main='',col='grey',log='xy')
smalls <- which(table(Prod)<20)
points(log(ms[smalls,1]),log(ms[smalls,2]),pch='+')
dms <- scale(ms)
smalls <- which(table(Prod)<20)
prods <- tapply(sales$Uprice,sales$Prod,list)
similar <- matrix(NA,length(smalls),7,dimnames=list(names(smalls),c('Simil','ks.stat','ks.p','medP','iqrP','medS','iqrS')))
for (i in seq(along=smalls)){
d<-scale(dms,dms[smalls[i],],FALSE)
d<-sqrt(drop(d^2 %*% rep(1,ncol(d))))
stat<-ks.test(prods[[smalls[i]]],prods[[order(d)[2]]])
similar[i,]<-c(order(d)[2],stat$statistic,stat$p.value,ms[smalls[i],],ms[order(d)[2],])
}
# save similar matrix
head(similar)
levels(Prod[similar[1,1]])
nrow(similar[similar[,'ks.p']>=0.9,])
sum(similar[,'ks.p']>=0.9)
save(similar, file='similarProducts.Rdata')
install.packages('ROCR')
install.packages("ROCR")
library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
pred
head(ROCR.simple)
perf <- performance(pred,'prec','rec')
plot(perf)
par(mfcol = c(1,1))
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,'prec','rec')
plot(perf)
par(mfcol = c(1,2))
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,'prec','rec')
plot(perf)
PRcurve <- function(preds,trues,...){
require(ROCR, quietly=T)
pd <- prediction(preds,trues)
pf<-performance(pd,'prec','rec')
pf$y.value<- lapply(pf$y.values,function(x)rev(cummax(rev(x))))
}
PRcurve <- function(preds,trues,...){
require(ROCR, quietly=T)
pd <- prediction(preds,trues)
pf<-performance(pd,'prec','rec')
pf$y.value<- lapply(pf$y.values,function(x)rev(cummax(rev(x))))
plot(pf,...)
}
PRcurve(ROCR.simple$predictions, ROCR.simple$labels)
PRcurve <- function(preds,trues,...){
require(ROCR, quietly=T)
pd <- prediction(preds,trues)
pf<-performance(pd,'prec','rec')
pf@y.value<- lapply(pf@y.values,function(x)rev(cummax(rev(x))))
plot(pf,...)
}
PRcurve(ROCR.simple$predictions, ROCR.simple$labels)
PRcurve <- function(preds,trues,...){
require(ROCR, quietly=T)
pd <- prediction(preds,trues)
pf<-performance(pd,'prec','rec')
pf@y.values<- lapply(pf@y.values,function(x)rev(cummax(rev(x))))
plot(pf,...)
}
PRcurve(ROCR.simple$predictions, ROCR.simple$labels)
